import java.awt.Color;
import java.awt.Font;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.Border;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;

public class CookieGenerator {
  public int cookies;
  public int cookiesGenerate;
  public int cookiesPerSecond;
  public int btnClicked=0;
  public static final int MultiplierPrice=50;
  public static final int farmerCount=6;
  public int[] farmer;
  public int[] farmerPurchased;
  CookieGenerator()
  {
    cookies=0;
    cookiesGenerate=1;
    cookiesPerSecond=0;
    farmer=new int[]{1,10,100,1000,10000,100000};           /* This array represents the number of cookies generated by each farmer i.e.,
     farmer[0] generates 1 cookie per second, farmer[1] generates 10 cookies per second and so on. */
    farmerPurchased=new int[]{0,0,0,0,0,0};
    btnClicked=0;
  }
  public void AutoFarmerAction(JButton[] FarmerButtons,int i,JLabel L1,JLabel L3,JLabel[] purchased)
  {
    FarmerButtons[i].addActionListener(e -> {
      if(cookies>=(farmer[i]*100))            // Checking if we have enough cookies to buy the farmer.
      {
        cookiesPerSecond+=farmer[i];            // Increasing cookiesPerSecond count.
        cookies-=(farmer[i]*100);               // Decreasing the amount of cookies that the player has.
        L1.setText("Cookies:  "+cookies);
        L3.setText("Cookies Per Second:  "+cookiesPerSecond);               // Setting text of JLabels with the updated values.
        farmerPurchased[i]++;
        purchased[i].setText("Purchased: "+farmerPurchased[i]);
        this.playSound();
      }
      
    });
  }
  public void FarmerPrices(JFrame f,JButton[] FarmerButtons,JLabel[] purchased)
  {
    JLabel FarmerPrices;
    int y=100;
    for(int i=0;i<CookieGenerator.farmerCount;i++)          // Setting the text inside the buttons and the price text of all the farmers.
    {
      FarmerButtons[i]=new JButton("Auto Farmer "+(i+1));         // Setting button text.
      FarmerPrices=new JLabel("Price: "+(farmer[i]*100));         // Setting price text.
      FarmerButtons[i].setBounds(300,y,200,35);
      FarmerPrices.setBounds(520,y,150,40);                   // Positioning both texts in the JFrame.
      purchased[i]=new JLabel("Purchased: "+farmerPurchased[i]);
      purchased[i].setBounds(200,y,100,40);
      y=y+40;
      f.add(FarmerButtons[i]);                    // Adding them to the JFrame.
      f.add(FarmerPrices);
      f.add(purchased[i]);
    }
  }
  
  public void playSound()
  {
    try                     // This functions plays a cookie crunch sound effect in the program.
    {
      AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("crunch.wav").getAbsoluteFile( ));
      Clip clip = AudioSystem.getClip();
      clip.open(audioInputStream);
      clip.start();
    }
    catch(Exception ex)
    {
      System.out.println("Error with playing sound.");
      ex.printStackTrace( );
    }
  }
  
  public static void main(String[] args) throws IOException {
    
    JFrame a= new JFrame("Menu Screen");            // Menu screen of the game.
    a.setSize(700,500);
    a.addWindowListener(new WindowAdapter() {           // Window listener to terminate the program whenever the close button is clicked.
      @Override
      public void windowClosing(WindowEvent e) {
        System.exit(0);
      }
    });
    JButton play= new JButton("Play Cookie Generator");             // Play button on the menu screen.
    play.setBounds(185, 50, 300, 35);
    a.add(play);
    play.setEnabled(true);                       
    JLabel howTo= new JLabel("How to Play");                // How to play labels with instructions on playing the game.
    howTo.setBounds(275, 85, 400, 75);                      // Setting the dimensions and position of the label.
    howTo.setForeground(Color.blue);                            // Setting color and font of the label.
    howTo.setFont(new Font(Font.SERIF, Font.BOLD, 25)); 
    a.add(howTo);                                               // Adding the label to the menu JFrame.
    
    JLabel ruleOne= new JLabel("1- Click on the cookie icon to generate cookies.");        // Label containing rule number one of playing the game.
    ruleOne.setBounds(50, 150, 600, 20);
    ruleOne.setForeground(Color.GRAY);                          // Configuring the label.
    ruleOne.setFont(new Font(Font.SERIF, Font.PLAIN, 15)); 
    a.add(ruleOne);
    
    JLabel ruleTwo= new JLabel("2- You can buy auto farmers from cookies which generate cookies per second on differen rates.");  // rule number two.
    ruleTwo.setBounds(50, 180, 600, 20);
    ruleTwo.setForeground(Color.GRAY);                          // Configuring the label.
    ruleTwo.setFont(new Font(Font.SERIF, Font.PLAIN, 15));   
    a.add(ruleTwo);
    JLabel ruleThree= new JLabel("3- You can buy cookie efficiency multiplier to increase the amount cookies generated per click.");  // rule number three.
    ruleThree.setBounds(50, 210, 600, 20);
    ruleThree.setForeground(Color.GRAY);                        // Configuring the label.
    ruleThree.setFont(new Font(Font.SERIF, Font.PLAIN, 15)); 
    a.add(ruleThree);
    a.setLayout(null);
    a.setVisible(true);
    play.addActionListener(new ActionListener() {        // Whenever the play button is clicked, a new window is opened in which the game is running.
      @Override // override the existing actionPerform.
      public void actionPerformed(ActionEvent ef) {
        try {
          CookieGenerator g=new CookieGenerator();
          JFrame f=new JFrame("Cookie Generator");
          f.setSize(700,500);
          f.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
              System.exit(0);
            }
          });
          
          JLabel L1=new JLabel("Cookies:  "+g.cookies);           // Adding labels with current game info.
          L1.setBounds(50,10,200,40);
          f.add(L1);
          JLabel L2=new JLabel("Cookies on Click:  "+g.cookiesGenerate);
          L2.setBounds(50,50,200,40);
          f.add(L2);
          JLabel L3=new JLabel("Cookies Per Second:  "+g.cookiesPerSecond);
          L3.setBounds(50,90,200,40);
          f.add(L3);
          
          final JButton CookieButton = new JButton(new ImageIcon(ImageIO.read(new File("cookie.png")))); //Buttons to confirm input.
          CookieButton.setBounds(50, 150, 120, 120);
          CookieButton.setBorderPainted(false);
          
          f.add(CookieButton);
          
          JButton CookieMultiplier= new JButton("Cookie Multiplier");        //Button to buy a cookie multiplier which doubles the amount of cookies per click.
          CookieMultiplier.setBounds(300, 30, 200, 35);
          f.add(CookieMultiplier);
          CookieMultiplier.setEnabled(false);
          
          JLabel L4=new JLabel("Price: 50");          // Label to show the price of the cookie multiplier.
          L4.setBounds(520,30,100,40);
          f.add(L4);
          
          JLabel L5=new JLabel("Clicked till Active:  "+(10-g.btnClicked));       // Label to show the number of clicks remaining to unlock the cookie multiplier buying button.
          L5.setBounds(300,1,150,25);
          f.add(L5);
          
          JButton[] FarmerButtons=new JButton[CookieGenerator.farmerCount];
          JLabel[] farmerPurch=new JLabel[CookieGenerator.farmerCount];
          g.FarmerPrices(f,FarmerButtons,farmerPurch);                // Calling the farmer prices function to set text of buttons and prices.
          
          CookieButton.addActionListener(e -> {           // Adding action listener to the cookie icon.
            g.cookies+=g.cookiesGenerate;               // Whenever it is clicked, increase current cookies by the rate of cookie generation. 
            CookieButton.setBorderPainted(true);
            L1.setText("Cookies:  "+g.cookies);
            g.btnClicked++;                                         // Increment the current button clicks done for unlocking the cookie efficiency.
            if(g.btnClicked<=10 && !CookieMultiplier.isEnabled())
            {
              L5.setText("Clicked till Active:  "+(10-g.btnClicked));         // Updating text of label of clicks remaining.
            }
            if(g.btnClicked>=10)
            {
              CookieMultiplier.setEnabled(true);              // If clicked more than 10 times, cookie efficiency is unlocked.
              g.btnClicked=0;
            }
          });
          
          CookieMultiplier.addActionListener(e -> {           // Adding action listener to the cookie efficiency.
            if(g.cookies>=CookieGenerator.MultiplierPrice)          // Checking if we have enough cookies to buy cookie efficiency.
            {
              g.cookiesGenerate=g.cookiesGenerate*2;              // Doubling the current cookies per click.
              g.cookies-=CookieGenerator.MultiplierPrice;         // Decreasing the current cookies by subtracting the price of buying cookie efficiency.
              L1.setText("Cookies:  "+g.cookies);
              L2.setText("Cookies on Click:  "+g.cookiesGenerate);            // Setting updated text of labels.
              g.btnClicked=0;
              CookieMultiplier.setEnabled(false);
              L5.setText("Clicked till Active:  "+(10-g.btnClicked));          // Resetting the click count to buy the efficiency.
              g.playSound();
            }
          });
          g.AutoFarmerAction(FarmerButtons,0,L1,L3,farmerPurch);              // Adding the action listeners for all the autofarmer buttons.
          g.AutoFarmerAction(FarmerButtons,1,L1,L3,farmerPurch);
          g.AutoFarmerAction(FarmerButtons,2,L1,L3,farmerPurch);
          g.AutoFarmerAction(FarmerButtons,3,L1,L3,farmerPurch);
          g.AutoFarmerAction(FarmerButtons,4,L1,L3,farmerPurch);
          g.AutoFarmerAction(FarmerButtons,5,L1,L3,farmerPurch);
          
          Timer SimpleTimer = new Timer(1000, e -> {              // Timer object to update the count of cookies every second by adding the cookiesPerSecond to current cookies each second.
            g.cookies+=g.cookiesPerSecond;
            L1.setText("Cookies:  "+g.cookies);
          });
          SimpleTimer.start();                    // Starting the timer.
          f.setLayout(null);
          f.setVisible(true);
        } catch (IOException ex) {
          Logger.getLogger(CookieGenerator.class.getName()).log(Level.SEVERE, null, ex);
        }
      }
    });
  }
}


